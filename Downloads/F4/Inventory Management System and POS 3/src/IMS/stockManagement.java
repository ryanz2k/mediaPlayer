/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package IMS;
import java.io.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDateTime;
/**
 *
 * @author Ryan
 */
public class stockManagement extends javax.swing.JFrame {
    private String UID;
    private boolean canImport = true;
    DefaultTableModel model;
    DefaultTableModel model2;
    /**
     * Creates new form stockManagement
     */
    public stockManagement() {
        initComponents();
        model = (DefaultTableModel) itemList.getModel();
        model2 = (DefaultTableModel) reportLog.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        editPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        descripLabel = new javax.swing.JLabel();
        priceText = new javax.swing.JTextField();
        descripText = new javax.swing.JTextField();
        quantityLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        quantityText = new javax.swing.JTextField();
        productList = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        importData = new javax.swing.JButton();
        backupButton = new javax.swing.JButton();
        budget = new javax.swing.JLabel();
        budgetLabel = new javax.swing.JLabel();
        logout = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemList = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        reportLog = new javax.swing.JTable();
        budgetLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inventory Management System");
        setPreferredSize(new java.awt.Dimension(800, 630));

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setLayout(null);

        editPanel.setBackground(new java.awt.Color(255, 255, 255));
        editPanel.setLayout(null);

        nameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(51, 51, 51));
        nameLabel.setText("Name");
        editPanel.add(nameLabel);
        nameLabel.setBounds(20, 0, 50, 40);

        descripLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        descripLabel.setForeground(new java.awt.Color(51, 51, 51));
        descripLabel.setText("Description");
        editPanel.add(descripLabel);
        descripLabel.setBounds(20, 40, 83, 40);

        priceText.setEditable(false);
        editPanel.add(priceText);
        priceText.setBounds(110, 130, 190, 20);

        descripText.setEditable(false);
        editPanel.add(descripText);
        descripText.setBounds(110, 50, 190, 23);

        quantityLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        quantityLabel.setForeground(new java.awt.Color(51, 51, 51));
        quantityLabel.setText("Quantity");
        editPanel.add(quantityLabel);
        quantityLabel.setBounds(20, 80, 63, 40);

        priceLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        priceLabel.setForeground(new java.awt.Color(51, 51, 51));
        priceLabel.setText("Price ($)");
        editPanel.add(priceLabel);
        priceLabel.setBounds(20, 130, 59, 23);

        quantityText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityTextActionPerformed(evt);
            }
        });
        editPanel.add(quantityText);
        quantityText.setBounds(110, 90, 190, 23);

        productList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a Product", "Chardonnay Wine", "Cabernet Sauvignon Wine", "Stout Beer", "Schwarzbier", "Scotch Whisky", "Bourbon Whisky", "Plymouth Gin", "Old Tom Gin", "Sweet Cider", "Bitter Cider", "Fruit Vodka", "Plain Vodka", "Distilled Soju", "Navy Rum", "Rhum Agricole" }));
        productList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productListActionPerformed(evt);
            }
        });
        editPanel.add(productList);
        productList.setBounds(110, 10, 190, 23);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        editPanel.add(jPanel2);
        jPanel2.setBounds(560, 0, 180, 110);

        addButton.setBackground(new java.awt.Color(102, 102, 102));
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("ORDER ITEM");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        editPanel.add(addButton);
        addButton.setBounds(10, 170, 140, 23);

        deleteButton.setBackground(new java.awt.Color(102, 102, 102));
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("RETURN ITEM");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        editPanel.add(deleteButton);
        deleteButton.setBounds(10, 210, 140, 23);

        updateButton.setBackground(new java.awt.Color(102, 102, 102));
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("UPDATE ITEM");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        editPanel.add(updateButton);
        updateButton.setBounds(160, 170, 140, 23);

        backButton.setBackground(new java.awt.Color(102, 102, 102));
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        editPanel.add(backButton);
        backButton.setBounds(160, 210, 140, 23);

        importData.setBackground(new java.awt.Color(102, 102, 102));
        importData.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        importData.setForeground(new java.awt.Color(255, 255, 255));
        importData.setText("IMPORT DATA");
        importData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importDataActionPerformed(evt);
            }
        });
        editPanel.add(importData);
        importData.setBounds(10, 250, 140, 23);

        backupButton.setBackground(new java.awt.Color(102, 102, 102));
        backupButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        backupButton.setForeground(new java.awt.Color(255, 255, 255));
        backupButton.setText("BACKUP");
        backupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupButtonActionPerformed(evt);
            }
        });
        editPanel.add(backupButton);
        backupButton.setBounds(160, 250, 140, 23);

        budget.setBackground(new java.awt.Color(102, 102, 102));
        budget.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        budget.setForeground(new java.awt.Color(102, 102, 102));
        budget.setText("10000");
        editPanel.add(budget);
        budget.setBounds(160, 280, 140, 70);

        budgetLabel.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        budgetLabel.setForeground(new java.awt.Color(102, 102, 102));
        budgetLabel.setText("BUDGET: $");
        editPanel.add(budgetLabel);
        budgetLabel.setBounds(10, 280, 152, 70);

        logout.setBackground(new java.awt.Color(102, 102, 102));
        logout.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        logout.setForeground(new java.awt.Color(255, 255, 255));
        logout.setText("LOGOUT");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        editPanel.add(logout);
        logout.setBounds(150, 350, 150, 23);

        jPanel1.add(editPanel);
        editPanel.setBounds(10, 200, 310, 390);

        itemList.setAutoCreateRowSorter(true);
        itemList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID#", "Product", "Description", "Quantity (Bottles)", "Price ( $ )", "Total Price ($)", "Stock Level"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(itemList);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 20, 780, 170);

        reportLog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time", "Description", "Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(reportLog);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(330, 240, 460, 350);

        budgetLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        budgetLabel1.setForeground(new java.awt.Color(255, 255, 255));
        budgetLabel1.setText("REPORT LOG");
        jPanel1.add(budgetLabel1);
        budgetLabel1.setBounds(480, 190, 290, 56);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 802, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 191, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        int prompt = JOptionPane.showOptionDialog(
            null, // Parent component (null for default)
            "Please make sure to backup your data before leaving.\nDo you want to continue?", // Message
            "Confirmation", // Title
            JOptionPane.YES_NO_OPTION, // Option type
            JOptionPane.QUESTION_MESSAGE, // Message type
            null, // Icon (null for default)
            new String[]{"Yes", "No"}, // Options
            "Yes" // Default option
        );
        if (prompt == JOptionPane.YES_OPTION){
            dispose();
        new AdminLogin().setVisible(true);
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if (itemList.getSelectedRowCount()==1){
            int quantityInt = Integer.parseInt(quantityText.getText());
            int priceInt = Integer.parseInt(priceText.getText());
            int totalPrice = quantityInt * priceInt;
            int laborFee = (int) (totalPrice*0.3);
            totalPrice -= laborFee;
            
            int prompt = JOptionPane.showOptionDialog(
                null, // Parent component (null for default)
                "You will only receive $"+totalPrice+".\n$"+laborFee+" will be deducted for the Delivery and Labor Fee.\nDo you still want to return the Item(s)?", // Message
                "Confirmation", // Title
                JOptionPane.YES_NO_OPTION, // Option type
                JOptionPane.QUESTION_MESSAGE, // Message type
                null, // Icon (null for default)
                new String[]{"Yes", "No"}, // Options
                "Yes" // Default option
            );
            if (prompt == JOptionPane.YES_OPTION){
                //deducting budget
                String budgetString = budget.getText();
                int budgetInt = Integer.parseInt(budgetString);
                int remainingBudget = budgetInt + totalPrice;
                budgetString = String.valueOf(remainingBudget);
                budget.setText(budgetString);
                
                //Add Log
                LocalDateTime date = LocalDateTime.now();
                int year = date.getYear();
                int month = date.getMonthValue();
                int day = date.getDayOfMonth();
                int hour = date.getHour();
                int minute = date.getMinute();
                int second = date.getSecond();

                String currentDate = hour+":"+minute+":"+second+"  "+month+"-"+day+"-"+year;
                model2.insertRow(model2.getRowCount(),new Object[] {currentDate,"Removed "+ itemList.getValueAt(itemList.getSelectedRow(), 3) +" "
                                + itemList.getValueAt(itemList.getSelectedRow(), 1),"Returned Item"});
                
                model.removeRow(itemList.getSelectedRow());
                productList.setSelectedIndex(0);
                descripText.setText("");
                quantityText.setText("");
                priceText.setText("");
                itemList.getSelectionModel().clearSelection();
                JOptionPane.showMessageDialog(this, "Product successfully returned.");
            }else {
                JOptionPane.showMessageDialog(this, "Item Return Cancelled");
            }
            
        }
        else{
            if(itemList.getRowCount()==0){
                JOptionPane.showMessageDialog(this, "The Table is Empty, Please Add a Product First.");
            }
            else{
                JOptionPane.showMessageDialog(this, "Please select a row to delete");
            }
        }
        canImport = true;
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        if (itemList.getSelectedRowCount()==1){
            String description = descripText.getText();
            String quantity = quantityText.getText();
            String price = priceText.getText();
               
            int quantityInt = Integer.parseInt(quantityText.getText());
            int priceInt = Integer.parseInt(priceText.getText());
            String existingQuantity = itemList.getValueAt(itemList.getSelectedRow(), 3).toString();
            int existingQuantityInt = Integer.parseInt(existingQuantity);
            //getting the Total Price and Quantity
            int totalPrice = quantityInt * priceInt;
            int totalInt = quantityInt - existingQuantityInt;
            int pricee = totalInt * priceInt;
            
            if (quantityInt <= 120){
                //deducting budget
                String budgetString = budget.getText();
                int budgetInt = Integer.parseInt(budgetString);
                int remainingBudget = budgetInt - pricee;
                //check if budget has sufficient funds
                if (remainingBudget < 0){
                    JOptionPane.showMessageDialog(this, "Insufficient Funds.\nTransaction Cancelled");
                }else {
                    budgetString = String.valueOf(remainingBudget);
                    budget.setText(budgetString);
                    int prompt = JOptionPane.showOptionDialog(
                    null, // Parent component (null for default)
                    "Total is $"+pricee+".\nDo you want to continue the Transaction?", // Message
                    "Confirmation", // Title
                    JOptionPane.YES_NO_OPTION, // Option type
                    JOptionPane.QUESTION_MESSAGE, // Message type
                    null, // Icon (null for default)
                    new String[]{"Yes", "No"}, // Options
                    "Yes" // Default option
                );
                if (prompt == JOptionPane.YES_OPTION) {
                    //stock level
                    String stockLevel = null;

                    if (quantityInt <= 0){
                        stockLevel = "Empty Stock";
                    }
                    else if (quantityInt < 30){
                        stockLevel = "Low Stock Level";
                    } else if (quantityInt >= 30 && quantityInt < 90){
                        stockLevel = "Average Stock Level";
                    } else if (quantityInt <= 120 && quantityInt >= 90){
                        stockLevel = "High Stock Level";
                    }
                    
                    //Add Report Log
                    if (totalInt < 0){
                        totalInt *= -1;
                        LocalDateTime date = LocalDateTime.now();
                        int year = date.getYear();
                        int month = date.getMonthValue();
                        int day = date.getDayOfMonth();
                        int hour = date.getHour();
                        int minute = date.getMinute();
                        int second = date.getSecond();

                        String currentDate = hour+":"+minute+":"+second+"  "+month+"-"+day+"-"+year;
                        model2.insertRow(model2.getRowCount(),new Object[] {currentDate,"Removed "+ totalInt +" "
                                + productList.getSelectedItem(),"Updated Item"});
                        totalInt *= -1;
                    }else if (totalInt > 0){
                        LocalDateTime date = LocalDateTime.now();
                        int year = date.getYear();
                        int month = date.getMonthValue();
                        int day = date.getDayOfMonth();
                        int hour = date.getHour();
                        int minute = date.getMinute();
                        int second = date.getSecond();

                        String currentDate = hour+":"+minute+":"+second+"  "+month+"-"+day+"-"+year;
                        model2.insertRow(model2.getRowCount(),new Object[] {currentDate,"Added "+ totalInt +" "
                                + productList.getSelectedItem(),"Updated Item"});
                    }
  
                    itemList.setValueAt(UID, itemList.getSelectedRow(),0);
                    itemList.setValueAt(description, itemList.getSelectedRow(), 2);
                    itemList.setValueAt(quantity, itemList.getSelectedRow(), 3);
                    itemList.setValueAt(price, itemList.getSelectedRow(), 4);
                    itemList.setValueAt(totalPrice, itemList.getSelectedRow(), 5);
                    itemList.setValueAt(stockLevel, itemList.getSelectedRow(), 6);
                    JOptionPane.showMessageDialog(this, "Product successfully updated");
                    productList.setSelectedIndex(0);
                    descripText.setText("");
                    quantityText.setText("");
                    priceText.setText("");
                    itemList.getSelectionModel().clearSelection();
                }else {
                    JOptionPane.showMessageDialog(this, "Update Cancelled");
                }
                }          
            }else{
                JOptionPane.showMessageDialog(this, "Every Product Quantity can't exceed 120 Bottles.");
            }
        }
        else{
            if(itemList.getRowCount()==0){
                JOptionPane.showMessageDialog(this, "The Table is Empty, Please Add a Product First.");
            }
            else{
                JOptionPane.showMessageDialog(this, "Please select a row to update");
            }
        }
        canImport = true;
    }//GEN-LAST:event_updateButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if (descripText.getText().equals("")||quantityText.getText().equals("")||priceText.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please Fill in The Blanks","Error",JOptionPane.ERROR_MESSAGE);
        }
        else{
            int quantityInt = Integer.parseInt(quantityText.getText());
            int priceInt = Integer.parseInt(priceText.getText());
            String targetUID = null;
            int totalPrice = quantityInt * priceInt;
            
            if (quantityInt <= 120){
                int prompt = JOptionPane.showOptionDialog(
                null, // Parent component (null for default)
                "Total Cost is $"+totalPrice+".\nDo you want to continue the Transaction?", // Message
                "Confirmation", // Title
                JOptionPane.YES_NO_OPTION, // Option type
                JOptionPane.QUESTION_MESSAGE, // Message type
                null, // Icon (null for default)
                new String[]{"Yes", "No"}, // Options
                "Yes" // Default option
                );
                
                //deducting budget
                String budgetString = budget.getText();
                int budgetInt = Integer.parseInt(budgetString);
                int remainingBudget = budgetInt - totalPrice;
                //check if budget has sufficient funds
                if (remainingBudget < 0){
                    JOptionPane.showMessageDialog(this, "Insufficient Funds.\nTransaction Cancelled");
                }else {
                    if (prompt == JOptionPane.YES_OPTION){
                        
                        
                        budgetString = String.valueOf(remainingBudget);
                        budget.setText(budgetString);
                        for (int row = 0; row < itemList.getRowCount(); row++){
                        targetUID = itemList.getValueAt(row, 0).toString();
                        
                        
                        
                        //check UID
                        if (UID.equals(targetUID))
                        {
                            String quantityString = itemList.getValueAt(row,3).toString();
                            int existingQuantity = Integer.parseInt(quantityString);
                            int totalInt = quantityInt + existingQuantity;
                            String totalIntString = String.valueOf(totalInt);

                            if (totalInt <= 120){
                                itemList.setValueAt(totalIntString, row, 3);
                            //stock level
                            String stockLevel = null;

                            if (quantityInt <= 0){
                                stockLevel = "Empty Stock";
                                }
                                else if (totalInt < 30){
                                    stockLevel = "Low Stock Level";
                                } else if (totalInt >= 30 && totalInt < 90){
                                    stockLevel = "Average Stock Level";
                                } else if (totalInt <= 120 && totalInt >= 90){
                                    stockLevel = "High Stock Level";
                                }
                                itemList.setValueAt(stockLevel, row, 6);

                                String totalPriceString = itemList.getValueAt(row,4).toString();
                                int totalPriceInt = Integer.parseInt(totalPriceString);
                                int newTotalPrice = totalPriceInt * totalInt;
                                
                                //Add log report
                                LocalDateTime date = LocalDateTime.now();
                                int year = date.getYear();
                                int month = date.getMonthValue();
                                int day = date.getDayOfMonth();
                                int hour = date.getHour();
                                int minute = date.getMinute();
                                int second = date.getSecond();

                                String currentDate = hour+":"+minute+":"+second+"  "+month+"-"+day+"-"+year;
                                model2.insertRow(model2.getRowCount(),new Object[] {currentDate,"Added "+ quantityInt+" "
                                    +productList.getSelectedItem(),"Ordered Item"});
                                
                                itemList.setValueAt(newTotalPrice, row, 5);
                                productList.setSelectedIndex(0);
                                descripText.setText("");
                                quantityText.setText("");
                                priceText.setText("");
                                JOptionPane.showMessageDialog(this, "Product successfuly added");
                                
                            }else {
                                JOptionPane.showMessageDialog(this, "Every Product Quantity can't exceed 120 Bottles.");
                            }

                        }
                        }
                        if (!UID.equals(targetUID))
                        {
                            //stock level
                        String stockLevel = null;

                        if (quantityInt <= 0){
                            stockLevel = "Empty Stock";
                        }
                        else if (quantityInt < 30){
                            stockLevel = "Low Stock Level";
                        } else if (quantityInt >= 30 && quantityInt < 90){
                            stockLevel = "Average Stock Level";
                        } else if (quantityInt <= 120 && quantityInt >= 90){
                            stockLevel = "High Stock Level";
                        }
                            //Add log report
                            LocalDateTime date = LocalDateTime.now();
                            int year = date.getYear();
                            int month = date.getMonthValue();
                            int day = date.getDayOfMonth();
                            int hour = date.getHour();
                            int minute = date.getMinute();
                            int second = date.getSecond();

                            String currentDate = hour+":"+minute+":"+second+"  "+month+"-"+day+"-"+year;
                            model2.insertRow(model2.getRowCount(),new Object[] {currentDate,"Added "+ quantityText.getText()+" "
                                    +productList.getSelectedItem(),"Ordered Item"});
                            //Add Data
                            model.insertRow(model.getRowCount(),new Object[] {UID,productList.getSelectedItem().toString(),descripText.getText(),
                                quantityText.getText(),priceText.getText(),totalPrice,stockLevel});
                            productList.setSelectedIndex(0);
                            descripText.setText("");
                            quantityText.setText("");
                            priceText.setText("");
                            JOptionPane.showMessageDialog(this, "Product successfuly added");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Transaction Cancelled");
                    }
                }
            } else{
                JOptionPane.showMessageDialog(this, "Every Product Quantity can't exceed 120 Bottles.");
            }
        }
        canImport = true; 
    }//GEN-LAST:event_addButtonActionPerformed

    private void quantityTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityTextActionPerformed

    private void productListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productListActionPerformed
        // TODO add your handling code here:
        String selectedItem = productList.getSelectedItem().toString();
        switch (selectedItem){
            case "Chardonnay Wine":
                UID = "001";
                descripText.setText("Popular dry white wine");
                priceText.setText("25");
                break;
            case "Cabernet Sauvignon Wine":
                UID = "002";
                descripText.setText("Bold, full-bodied red wine");
                priceText.setText("15");
                break;
            case "Stout Beer":
                UID = "003";
                descripText.setText("Dark, roasted, malty beer");
                priceText.setText("8");
                break;
            case "Schwarzbier":
                UID = "004";
                descripText.setText("German-style black lager");
                priceText.setText("10");
                break;
            case "Scotch Whisky":
                UID = "005";
                descripText.setText("Smoky, peaty Scottish whisky");
                priceText.setText("30");
                break;
            case "Bourbon Whisky":
                UID = "006";
                descripText.setText("American oak-aged whisky");
                priceText.setText("20");
                break;
            case "Plymouth Gin":
                UID = "007";
                descripText.setText("Classic, citrusy British gin");
                priceText.setText("20");
                break;
            case "Old Tom Gin":
                UID = "008";
                descripText.setText("Slightly sweetened gin variety");
                priceText.setText("25");
                break;
            case "Sweet Cider":
                UID = "009";
                descripText.setText("Apple juice with alcohol");
                priceText.setText("8");
                break;
            case "Bitter Cider":
                UID = "010";
                descripText.setText("Dry, tart apple cider");
                priceText.setText("8");
                break;
            case "Fruit Vodka":
                UID = "011";
                descripText.setText("Vodka with fruit flavoring");
                priceText.setText("15");
                break;
            case "Plain Vodka":
                UID = "012";
                descripText.setText("Neutral, clear spirit");
                priceText.setText("10");
                break;
            case "Distilled Soju":
                UID = "013";
                descripText.setText("Clear Korean liquor");
                priceText.setText("15");
                break;
            case "Navy Rum":
                UID = "014";
                descripText.setText("High-proof, spiced rum");
                priceText.setText("15");
                break;
            case "Rhum Agricole":
                UID = "015";
                descripText.setText("French Caribbean rum variety");
                priceText.setText("30");
                break;      
        }
    }//GEN-LAST:event_productListActionPerformed

    private void itemListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemListMouseClicked
        // TODO add your handling code here:
        String IDDescription = itemList.getValueAt(itemList.getSelectedRow(), 0).toString();
        String tblDescription = itemList.getValueAt(itemList.getSelectedRow(), 2).toString();
        String tblQuantity = itemList.getValueAt(itemList.getSelectedRow(), 3).toString();
        String tblPrice = itemList.getValueAt(itemList.getSelectedRow(), 4).toString();
        
        int IDint = Integer.parseInt(IDDescription);
        
        productList.setSelectedIndex(IDint);
        descripText.setText(tblDescription);
        quantityText.setText(tblQuantity);
        priceText.setText(tblPrice);
    }//GEN-LAST:event_itemListMouseClicked

    private void backupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupButtonActionPerformed
        // TODO add your handling code here:
        if (itemList.getRowCount()!= 0 || reportLog.getRowCount()!= 0)
        {
            String filepath = "stock data.txt";
            File file = new File(filepath);

            try{
                //Stock Item Save Data
                FileWriter fw = new FileWriter(file);
                BufferedWriter bw = new BufferedWriter(fw);

                for(int i = 0; i < itemList.getRowCount(); i++){
                    for (int j = 0; j < itemList.getColumnCount(); j++){
                        bw.write(itemList.getValueAt(i,j)+"_");
                    }
                    bw.newLine();
                }
                bw.close();
                fw.close();
            } catch (IOException ex){
                java.util.logging.Logger.getLogger(stockManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }

            String filepath2 = "report log data.txt";
            File file2 = new File(filepath2);

            try{
                //Report Log Save Data
                FileWriter fw2 = new FileWriter(file2);
                BufferedWriter bw2 = new BufferedWriter(fw2);

                for(int i = 0; i < reportLog.getRowCount(); i++){
                    for (int j = 0; j < reportLog.getColumnCount(); j++){
                        bw2.write(reportLog.getValueAt(i,j)+"_");
                    }
                    bw2.newLine();
                }
                bw2.close();
                fw2.close();
            } catch (IOException ex){
                java.util.logging.Logger.getLogger(stockManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            
            //save budget data
            try (BufferedWriter writer = new BufferedWriter(new FileWriter("budget.txt"))) {
            writer.write(budget.getText());
            } catch (IOException e) {
                e.printStackTrace();
            }
            canImport = true;
            JOptionPane.showMessageDialog(this, "Backup has been Created");
        }
        else{
            JOptionPane.showMessageDialog(this, "There is no data to be saved");
        }
    }//GEN-LAST:event_backupButtonActionPerformed

    private void importDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importDataActionPerformed
        // TODO add your handling code here:
        if (canImport == true)
        {
            String filepath = "stock data.txt";
            File file = new File(filepath);
            
            String filepath2 = "report log data.txt";
            File file2 = new File(filepath2);
            
            if (!file.exists()){
                JOptionPane.showMessageDialog(this, "Backup Data Does Not Exist.");
            } else{
            try{
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);

                Object[] lines = br.lines().toArray();

                for (int i = 0; i < lines.length; i++){
                    String[] row = lines[i].toString().split("_");
                    model.addRow(row);
                }
                
                FileReader fr2 = new FileReader(file2);
                BufferedReader br2 = new BufferedReader(fr2);

                Object[] line = br2.lines().toArray();

                for (int i = 0; i < line.length; i++){
                    String[] row = line[i].toString().split("_");
                    model2.addRow(row);
                }
                canImport = false;
                JOptionPane.showMessageDialog(this, "Backup Data Successfully Imported");
            } catch (IOException ex){
                java.util.logging.Logger.getLogger(stockManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            try (BufferedReader reader = new BufferedReader(new FileReader("budget.txt"))) {
            String line;
            //budget
            while ((line = reader.readLine()) != null) {
                budget.setText(line);
            }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        }else{
            JOptionPane.showMessageDialog(this, "Backup Data has already been Imported");
        }
    }//GEN-LAST:event_importDataActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        dispose();
        new AdminLogin().setVisible(true);
    }//GEN-LAST:event_logoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(stockManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(stockManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(stockManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(stockManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new stockManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton backupButton;
    public static javax.swing.JLabel budget;
    private javax.swing.JLabel budgetLabel;
    private javax.swing.JLabel budgetLabel1;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel descripLabel;
    private javax.swing.JTextField descripText;
    private javax.swing.JPanel editPanel;
    public static javax.swing.JButton importData;
    public static javax.swing.JTable itemList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JButton logout;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField priceText;
    private javax.swing.JComboBox<String> productList;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JTextField quantityText;
    private javax.swing.JTable reportLog;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
